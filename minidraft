package mini;

public class LoopsInfinityAndBeyond {
	/**
	* Private constructor to disable instantiation.
	*/
	private LoopsInfinityAndBeyond() {
	}
	/**
	* Define a flying saucer as the following string pattern: one
	, followed by
	* zero to many , followed by one . Write a Java method
	that, given a
	* string find the first instance of a flying saucer (starting
	from the left)
	* and return its length. If no flying saucer exists return
	0.
	* <p>
	* For example: Given: "(==)" Return: 4
	* <p>
	* Given: "***()**(===)" Return: 2
	* <p>
	* Given: "****(***)" Return: 0
	*
	* @param source input string
	* @return the length
	*/
	public static int flyingSaucerLength(String srouce) {
		    int length = 0;
		    boolean foundOpenParenthesis = false;
		    for (char c : srouce.toCharArray()) {
		        if (c == '(') {
		            foundOpenParenthesis = true;
		        } else if (c == ')' && foundOpenParenthesis) {
		            return length + 2;
		        } else if (c == '=' && foundOpenParenthesis) {
		            length++;
		        } else {
		            foundOpenParenthesis = false;
		            length = 0;
		        }
		    }
		    return 0;
		}
	
	
	
	/**
	* Write a Java method that, given a string which many
	contain a flying saucer
	* broken into two parts with characters in between, return
	a string where the
	* flying is fixed by removing the in between characters. Look
	for the two parts
	* of the flying saucer from left to right and fix the saucer
	with the first
	* available parts.
	* <p>
	* For example:
	* Given: ***(==****===)***
	* Return: ***(=====)***
	* <p>
	* Given: ***(==****)**=)*
	* Return: ***(==)**=)*
	* <p>
	* Given: ***(==)**
	* Return: ***(==)**
	*
	* @param s
	* @return
	*/
	public static String fixFlyingSaucer(String s) {
		int count = 0;
		int numStar = 0;
		int saucerStarted = 0;
		int saucerEnded = 0;
		int start = -1;
		int end = -1;
		int i = 0;
		
		for (i = 0; i < s.length(); i++) {
			if(s.charAt(i) == '(') {
				count = 0;
				start = i;
				saucerStarted = 1;
			}
			else if (s.charAt(i) == ')') {
				saucerEnded = 1;
				if (count > 0 && start != -1) {
					end = i;
					break;
				}
				else {
					start = -1;
				}
			}
			else if (s.charAt(i) == '=') {
				count++;
			}
			if (saucerStarted == 1 && saucerEnded == 0) {
				if (s.charAt(i) == '*') {
					numStar++;
				}
			}
		}	
		if (start != -1 && end != -1) {
			String firstPart = s.substring(0, start);
			String secondPart = s.substring(end + 1);
			int numEquals = end - start - numStar - 1;
			String fixedSaucer = firstPart + "(" + "=".repeat(numEquals) + ")" + secondPart;
			return fixedSaucer;
		}
		else {
			return s;
		}
	}
		
	/**
	* Write a Java method that, given a string which many
	contain many flying
	* saucers, return the number of flying saucers. For this
	problem a flying
	* saucer may wrap around from the right side of the string
	to the left.
	* <p>
	* For example:
	* Given: ***(===)***
	* Return: 1
	* <p>
	* Given: =)**(==)**(
	* Return: 2
	* <p>
	* Given: ***(=*=)**
	* Return: 0
	*
	* @param s
	* @return
	*/
		public static int countFlyingSaucers(String s) {
	    int count = 0;
	    boolean hasStar = false; // flag to check for asterisks within a set of parentheses

	    for (int i = 0; i < s.length(); i++) {
	        char c = s.charAt(i);

	        if (c == '(') {
	            hasStar = false;
	        } else if (c == ')') {
	            if (!hasStar) {
	                count++;
	            }
	            hasStar = false;
	        } else if (c == '=') {
	            hasStar = false;
	            for (int j = i + 1; j < s.length() && s.charAt(j) != ')'; j++) {
	                if (s.charAt(j) == '*') {
	                    hasStar = true;
	                    count--;
	                    break;
	                }
	            }
	        }
	    }

	    return count;
	}
	/**
	* Write a Java method that, given a string which many
	contain many flying
	* saucers, shifts all of the saucers one character to the
	right. For this
	* problem a flying saucer may wrap around from the right
	side of the string to
	* the left. The returned string should have the same number
	of characters as
	* the given string. This is achieved by moving the
	character to the right of a
	* saucer to its left. It can be assumed that saucers will
	never be touching
	* each other (i.e., there will always be at least one
	character between any two
	* saucers). Also, a saucer will not touch itself (e.g., "=)
	(=").
	* <p>
	* For example:
	* Given: ***(===)***
	* Return: ****(===)**
	* <p>
	* Given: =)**(==)**(
	* Return: (=)***(==)*
	* <p>
	* Given: a()bcde(=*=)fg
	* Return: ab()cde(=*=)fg
	*
	* @param s
	* @return
	*/
	public static String flyingSaucersFly(String input) {
	    int openCount = 0;
	    int numSpaces = 0;
	    int characterCount = 0;
	    int openIndex = -1;
	    int closeIndex = 0;
	    String flyingSaucer = "";
	    String temp = "";
	    
	    for (int i = 0; i < input.length(); i++) {
	        char currentChar = input.charAt(i);
	        
	        if (currentChar == '(') {
	            openCount++;
	            openIndex = 1;
	            
	            if (input.charAt(i + 1) == ')') {
	                openCount++;
	                closeIndex = i + 1;
	                temp = input.substring(openIndex, closeIndex + 1);
	                flyingSaucer = input.substring(0, openIndex) + input.substring(closeIndex + 1, closeIndex + 2) + temp + input.substring(closeIndex + 2, input.length());
	                break;
	            }
	        }
	        else if (currentChar == ')') {
	            openCount++;
	            closeIndex = i;
	            
	            if (openCount >= 1 && characterCount == 0 && numSpaces != 1) {
	                temp = input.substring(input.length() - 1);
	                flyingSaucer = temp + input.substring(0, input.length() - 1);
	                break;
	            }
	            else if (openCount >= 1 && numSpaces == 1) {
	                temp = input.substring(openIndex, closeIndex + 1);
	                flyingSaucer = input.substring(0, openIndex) + input.substring(closeIndex + 1, closeIndex + 2) + temp + input.substring(closeIndex + 2);
	                break;
	            }
	        }
	        else if (currentChar == '=') {
	            openCount++;
	        }
	        else if (currentChar != ' ') {
	            if (openCount > 1) {
	                characterCount = 0;
	            }
	            else if (openCount < 1) {
	                numSpaces += 1;
	            }
	            else {
	                characterCount += 1;
	            }
	        }
	    }
	    
	    return flyingSaucer;
	}
}
